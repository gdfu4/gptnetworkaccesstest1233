using System;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.UI;
using Object = UnityEngine.Object;

namespace Samples.HelloNetcode
{
#if !UNITY_DISABLE_MANAGED_COMPONENTS
    public class HealthUI : IComponentData, IDisposable, ICloneable
    {
        public Transform HealthBar;
        public Image HealthSlider;
        public float3 Offset;
        
        public void Dispose()
        {
            //The Healbar is disposed by the client in two cases:
            //- By the DespawnHealthBarSystem (if the healt < 0)
            //- When a character is respawn (so the ghost get destroyed). Being the HealthUI this method is called in that case.
            if (HealthBar != null)
                Object.Destroy(HealthBar.gameObject);
        }

        public object Clone()
        {
            if (HealthBar == null || HealthBar.gameObject == null)
                return new HealthUI();
            var newHealtbar = Object.Instantiate(HealthBar.gameObject);
            var images = HealthBar.gameObject.GetComponentsInChildren<Image>();
            return new HealthUI
            {
                HealthBar = newHealtbar.GetComponent<Transform>(),
                HealthSlider = images[1]
            };
        }
    }

    [WorldSystemFilter(WorldSystemFilterFlags.ClientSimulation)]
    [UpdateInGroup(typeof(PresentationSystemGroup))]
    public partial struct SpawnHealthBarSystem : ISystem
    {
        public void OnCreate(ref SystemState state)
        {
            state.RequireForUpdate<HealthBarSpawner>();
            state.RequireForUpdate<Health>();
        }

        public void OnUpdate(ref SystemState state)
        {
            var ecb = new EntityCommandBuffer(Allocator.Temp);
            var query = state.EntityManager.CreateEntityQuery(ComponentType.ReadOnly<HealthBarSpawner>());
            var spawner = query.GetSingleton<HealthBarSpawner>();
            foreach (var (_, entity) in SystemAPI.Query<RefRO<Health>>()
                         .WithEntityAccess().WithNone<HealthUI>())
            {
                var go = Object.Instantiate(spawner.HealthBarPrefab);
                var image = go.GetComponentsInChildren<Image>();
                ecb.AddComponent(entity, new HealthUI
                {
                    HealthBar = go.transform,
                    HealthSlider = image[1],
                    Offset = spawner.Offset,
                });
            }
            ecb.Playback(state.EntityManager);
        }
    }
#endif
}
using Unity.Entities;
using Unity.Transforms;
using UnityEngine;

namespace Samples.HelloNetcode
{
#if !UNITY_DISABLE_MANAGED_COMPONENTS
    /// <summary>
    /// Update position and rotation of the health bar above players. This will make sure the health bar follow the character
    /// character and is always facing the main camera.
    /// </summary>
    [WorldSystemFilter(WorldSystemFilterFlags.ClientSimulation)]
    [UpdateInGroup(typeof(PresentationSystemGroup))]
    [RequireMatchingQueriesForUpdate]
    public partial struct UpdateHealthBarSystem : ISystem
    {
        public void OnUpdate(ref SystemState state)
        {
            if (Camera.main == null)
            {
                state.Enabled = false;
                return;
            }

            var mainCamera = Camera.main;

            foreach (var (ui, health, ltw) in SystemAPI.Query<HealthUI, RefRO<Health>, RefRO<LocalToWorld>>())
            {
                if (health.ValueRO.CurrentHitPoints <= 0)
                {
                    continue;
                }
                ui.HealthBar.position = ltw.ValueRO.Position + ui.Offset;
                var n = mainCamera.transform.position - ui.HealthBar.position;
                ui.HealthBar.rotation = Quaternion.LookRotation(n);
                ui.HealthSlider.fillAmount = health.ValueRO.CurrentHitPoints / health.ValueRO.MaximumHitPoints;
            }

        }
    }
#endif
}
using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;

namespace Samples.HelloNetcode
{
#if !UNITY_DISABLE_MANAGED_COMPONENTS
    public class HealthBarSpawner : IComponentData
    {
        public GameObject HealthBarPrefab;
        public Vector3 Offset;
    }
#endif

    public class HealthBarSpawnerAuthoring : MonoBehaviour
    {
        public GameObject HealthBarPrefab;
        public float3 Offset;
#if !UNITY_DISABLE_MANAGED_COMPONENTS

        class Baker : Baker<HealthBarSpawnerAuthoring>
        {
            public override void Bake(HealthBarSpawnerAuthoring authoring)
            {
                var entity = GetEntity(TransformUsageFlags.Dynamic);
                AddComponentObject(entity, new HealthBarSpawner
                {
                    HealthBarPrefab = authoring.HealthBarPrefab,
                    Offset = authoring.Offset,
                });
            }
        }
#endif
    }
}
